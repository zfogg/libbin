name: CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  CC: clang

jobs:
  test:
    name: Test and Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cppcheck valgrind llvm

    - name: Build and test (optimized)
      run: |
        make clean
        make test

    - name: Build and test (debug)
      run: |
        make test-debug

    - name: Test with AddressSanitizer
      run: |
        make test-asan

    - name: Run static analysis (cppcheck)
      run: |
        make check-cppcheck

    - name: Generate coverage report
      run: |
        make coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./build/*.gcov
        fail_ci_if_error: false
        verbose: true

  memory-check:
    name: Memory Safety Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang valgrind llvm

    - name: Build for memory testing
      run: |
        make clean
        make test-debug

    - name: Run tests with Valgrind
      run: |
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./bin/bin_tests_debug

  cross-platform:
    name: Cross-platform Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [clang]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.compiler }}

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install llvm cppcheck

    - name: Build and test
      env:
        CC: ${{ matrix.compiler }}
      run: |
        make clean
        make test

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install clang-tidy
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy llvm

    - name: Run clang-tidy
      run: |
        export PATH="/usr/bin:$PATH"
        clang-tidy src/*.c -- -std=c2x -Isrc

